Index: src/pt/ulusofona/lp2/theWalkingDEISIGame/AdultoVivo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.lp2.theWalkingDEISIGame;\r\n\r\npublic class AdultoVivo extends Vivo {\r\n    public AdultoVivo(int idCriatura, String nome, int posX, int posY) {\r\n        super(idCriatura,6, nome, posX, posY);\r\n    }\r\n\r\n    @Override\r\n    public boolean isValidMove(int xO, int yO, int xD, int yD) {\r\n\r\n        if (xO == xD && yO == yD) {\r\n            return false;\r\n        }\r\n        return (xD == xO && yD >= yO - 2 && yD <= yO + 2) || (yD == yO && xD >= xO - 2 && xD <= xO + 2) ||\r\n                (xD == yD && xD <= xO + 2 && xD >= xO - 2) || (xD == -1 * yD && xD <= xO + 2 && xD >= xO - 2);\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean move(int xD, int yD) {\r\n        //se xd,yd tem equipamento apanha\r\n        // caso tenhamos equipamento dropamos e apanhamos a nova\r\n        GameInfo gameInfo = GameInfo.getInstance();\r\n        int id = gameInfo.getElementId(xD,yD);\r\n        if(id<0){ //entao Ã© id de equipamento\r\n             if(equipment!=null){\r\n                 dropEquipment();\r\n             }\r\n             Equipamento equipamento = gameInfo.getEquipmentById(id);\r\n             pickEquipment(equipamento);\r\n             gameInfo.removeEquipment(equipamento);\r\n        }\r\n        posX = xD;\r\n        posY = yD;\r\n        return true;\r\n    }\r\n\r\n    public String getImagePNG(){\r\n        return \"steve.png\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pt/ulusofona/lp2/theWalkingDEISIGame/AdultoVivo.java b/src/pt/ulusofona/lp2/theWalkingDEISIGame/AdultoVivo.java
--- a/src/pt/ulusofona/lp2/theWalkingDEISIGame/AdultoVivo.java	(revision 080bf6f4f02e7551a6fc6e9933c40b11b0dda4ba)
+++ b/src/pt/ulusofona/lp2/theWalkingDEISIGame/AdultoVivo.java	(date 1609090835976)
@@ -13,7 +13,6 @@
         }
         return (xD == xO && yD >= yO - 2 && yD <= yO + 2) || (yD == yO && xD >= xO - 2 && xD <= xO + 2) ||
                 (xD == yD && xD <= xO + 2 && xD >= xO - 2) || (xD == -1 * yD && xD <= xO + 2 && xD >= xO - 2);
-
     }
 
     @Override
Index: src/Tests/AdultoVivoTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Tests;\r\nimport org.junit.Assert;\r\nimport pt.ulusofona.lp2.theWalkingDEISIGame.GameInfo;\r\nimport pt.ulusofona.lp2.theWalkingDEISIGame.TWDGameManager;\r\n\r\n\r\nimport org.junit.Test;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\n\r\n\r\npublic class AdultoVivoTests {\r\n    TWDGameManager gameManager = new TWDGameManager();\r\n    File fich = new File(\"src/Tests/VivoTestData.txt\");\r\n\r\n\r\n    /*\r\n      TRUE:\r\n    * Out of bounds\r\n    * Diagonal +\r\n    * Vertical +\r\n    * Horizontal +\r\n     FALSE:\r\n    * Knight\r\n    * More than 2 spaces +\r\n    * */\r\n\r\n\r\n\r\n    @Test\r\n    public void outOfBounds1() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(0,0,-1,0);\r\n        Assert.assertEquals(false,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void outOfBounds2() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(0,0,0,-1);\r\n        Assert.assertEquals(false,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void outOfBounds3() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(6,6,7,6);\r\n        Assert.assertEquals(false,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void outOfBounds4() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(6,6,6,7);\r\n        Assert.assertEquals(false,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void oneRight(){\r\n        //1 Space to right\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,4,3);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void twoRight() {\r\n        //2 spaces to right\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,5,3);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void threeRight() {\r\n        //3 spaces right\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,6,3);\r\n        Assert.assertEquals(false,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void oneLeft() {\r\n        //1 space left\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,2,3);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void twoLeft() {\r\n        //2 spaces left\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,1,3);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void threeLeft() {\r\n        //3  spaces left\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,0,3);\r\n        Assert.assertEquals(false,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void oneUp() {\r\n        //one space up\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,3,2);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void twoUp() {\r\n        //two spaces up\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,3,1);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n\r\n    @Test\r\n    public void threeUp() {\r\n        //three spaces up\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,3,0);\r\n        Assert.assertEquals(false,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void oneDown() {\r\n        //one space down\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,3,2);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void twoDown() {\r\n        //two spaces down\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,3,5);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void threeDown() {\r\n        //three spaces down\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,3,6);\r\n        Assert.assertEquals(false,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void oneUpRightDiagonal() {\r\n        //one space in right up diagonal\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,4,2);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void twoRightUpDiagonal() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,5,1);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void threeRightUpDiagonal() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,6,0);\r\n        Assert.assertEquals(false,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void oneLeftUpDiagonal() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,2,2);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void twoLeftUpDiagonal() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,1,1);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void threeLeftUpDiagonal() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,0,0);\r\n        Assert.assertEquals(false,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void oneDownRightDiagonal() {\r\n        //one space in right up diagonal\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,4,4);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void twoRightDownDiagonal() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,5,5);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void threeRightDownDiagonal() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,6,6);\r\n        Assert.assertEquals(false,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void oneLeftDownDiagonal() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,2,4);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void twoLeftDownDiagonal() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,5,1);\r\n        Assert.assertEquals(true,obtained);\r\n    }\r\n\r\n    @Test\r\n    public void threeLeftDownDiagonal() {\r\n        gameManager.loadGame(fich);\r\n        boolean obtained = gameManager.move(3,3,0,6);\r\n        Assert.assertEquals(false,obtained);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Tests/AdultoVivoTests.java b/src/Tests/AdultoVivoTests.java
--- a/src/Tests/AdultoVivoTests.java	(revision 080bf6f4f02e7551a6fc6e9933c40b11b0dda4ba)
+++ b/src/Tests/AdultoVivoTests.java	(date 1609088980161)
@@ -14,20 +14,6 @@
     TWDGameManager gameManager = new TWDGameManager();
     File fich = new File("src/Tests/VivoTestData.txt");
 
-
-    /*
-      TRUE:
-    * Out of bounds
-    * Diagonal +
-    * Vertical +
-    * Horizontal +
-     FALSE:
-    * Knight
-    * More than 2 spaces +
-    * */
-
-
-
     @Test
     public void outOfBounds1() {
         gameManager.loadGame(fich);
