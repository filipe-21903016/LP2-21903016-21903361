Index: src/pt/ulusofona/lp2/theWalkingDEISIGame/VampiroZombie.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.lp2.theWalkingDEISIGame;\r\n\r\npublic class VampiroZombie extends Zombie {\r\n    public VampiroZombie(String nome, int posX, int posY) {\r\n        super(4, nome, posX, posY);\r\n    }\r\n\r\n    @Override\r\n    public boolean isValidMove(int xO, int yO, int xD, int yD) {\r\n        if (xO == xD && yO == yD || TWDGameManager.isDay()) {\r\n            return false;\r\n        }\r\n        return (xD == xO && yD >= yO - 2 && yD <= yO + 2) || (yD == yO && xD >= xO - 2 && xD <= xO + 2) ||\r\n                (xD == yD && xD <= xO + 2 && xD >= xO - 2) || (xD == -1 * yD && xD <= xO + 2 && xD >= xO - 2);\r\n    }\r\n\r\n    @Override\r\n    public boolean move(int xD, int yD) {\r\n        return false;\r\n    }\r\n\r\n    public String getImagePNG(){\r\n        return \"vampire.png\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/pt/ulusofona/lp2/theWalkingDEISIGame/VampiroZombie.java	(revision 0553f69b52a72f4160bd517538b17fb977d5414f)
+++ src/pt/ulusofona/lp2/theWalkingDEISIGame/VampiroZombie.java	(date 1608587542889)
@@ -7,7 +7,7 @@
 
     @Override
     public boolean isValidMove(int xO, int yO, int xD, int yD) {
-        if (xO == xD && yO == yD || TWDGameManager.isDay()) {
+        if (xO == xD && yO == yD) { //TODO if isDay -> return false
             return false;
         }
         return (xD == xO && yD >= yO - 2 && yD <= yO + 2) || (yD == yO && xD >= xO - 2 && xD <= xO + 2) ||
@@ -20,6 +20,6 @@
     }
 
     public String getImagePNG(){
-        return "vampire.png";
+        return null;
     }
 }
Index: src/pt/ulusofona/lp2/theWalkingDEISIGame/EspadaHattoriHanzo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.lp2.theWalkingDEISIGame;\r\n\r\npublic class EspadaHattoriHanzo extends Equipamento {\r\n    public EspadaHattoriHanzo(int id, int posX, int posY) {\r\n        super(id, 1, posX, posY);\r\n        super.titulo = \"Espada Hattori Hanzo\";\r\n    }\r\n\r\n    public String getImagePNG(){\r\n        return \"equipment.png\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/pt/ulusofona/lp2/theWalkingDEISIGame/EspadaHattoriHanzo.java	(revision 0553f69b52a72f4160bd517538b17fb977d5414f)
+++ src/pt/ulusofona/lp2/theWalkingDEISIGame/EspadaHattoriHanzo.java	(date 1608587425171)
@@ -7,6 +7,6 @@
     }
 
     public String getImagePNG(){
-        return "equipment.png";
+        return "ninjaSwrod.png";
     }
 }
Index: src/pt/ulusofona/lp2/theWalkingDEISIGame/TWDGameManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.lp2.theWalkingDEISIGame;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class TWDGameManager {\r\n    public TWDGameManager() {\r\n    }\r\n\r\n    public GameInfo gameInfo = GameInfo.getInstance();\r\n\r\n    public boolean loadGame(File fich) {\r\n        try {\r\n            Scanner scanner = new Scanner(fich);\r\n            ArrayList<String> lines = new ArrayList<>();\r\n\r\n            //Scans all lines to list\r\n            while (scanner.hasNextLine()) {\r\n                lines.add(scanner.nextLine());\r\n            }\r\n            int currentLine = 0;\r\n\r\n            String[] data;\r\n            //Get nrColumns and nrLines\r\n            data = lines.get(currentLine).split(\" \");\r\n            int nrLines = Integer.parseInt(data[0]);\r\n            int nrColumns = Integer.parseInt(data[1]);\r\n            gameInfo.setNrLines(nrLines);\r\n            gameInfo.setNrColumns(nrColumns);\r\n            currentLine++;\r\n\r\n            //Get Id of starting team\r\n            data = lines.get(currentLine).split(\"\");\r\n            int id = Integer.parseInt(data[0]);\r\n            gameInfo.setFirstTeamID(id);\r\n            gameInfo.setCurrentTeamID(id);\r\n            currentLine++;\r\n\r\n            //Get number of creatures and their properties\r\n            data = lines.get(currentLine).split(\"\");\r\n            int nrCreatures = Integer.parseInt(data[0]);\r\n            currentLine++;\r\n\r\n            int maxLine = currentLine + nrCreatures;\r\n            for (; currentLine < maxLine; currentLine++) {\r\n                data = lines.get(currentLine).split(\" : \");\r\n                int idCreature = Integer.parseInt(data[0]);\r\n                int idType = Integer.parseInt(data[1]);\r\n                String nomeCriatura = data[2].trim();\r\n                int posX = Integer.parseInt(data[3]);\r\n                int posY = Integer.parseInt(data[4]);\r\n                Creature creature = CreatureFactory.makeCreature(idCreature, nomeCriatura, posX, posY);\r\n                gameInfo.addCreature(creature);\r\n            }\r\n\r\n            data = lines.get(currentLine).split(\"\");\r\n            int nrEquipment = Integer.parseInt(data[0]);\r\n            currentLine++;\r\n\r\n            maxLine = currentLine + nrEquipment;\r\n            for (; currentLine < maxLine; currentLine++) {\r\n                data = lines.get(currentLine).split(\" : \");\r\n                int idEquipment = Integer.parseInt(data[0]);\r\n                //int idType = Integer.parseInt(data[1]);\r\n                int posX = Integer.parseInt(data[2]);\r\n                int posY = Integer.parseInt(data[3]);\r\n                Equipamento equipamento = EquipmentFactory.makeEquipment(idEquipment, posX, posY);\r\n                gameInfo.addEquipment(equipamento);\r\n            }\r\n\r\n            data = lines.get(currentLine).split(\"\");\r\n            int nrHavens = Integer.parseInt(data[0]);\r\n            currentLine++;\r\n\r\n            maxLine = currentLine + nrHavens;\r\n            for (; currentLine < maxLine; currentLine++) {\r\n                data = lines.get(currentLine).split(\" : \");\r\n                int posX = Integer.parseInt(data[0]);\r\n                int posY = Integer.parseInt(data[1]);\r\n                //TODO possivel fonte de erro\r\n                gameInfo.addSafeHaven(new SafeHaven(posX, posY));\r\n            }\r\n\r\n            scanner.close();\r\n            getInitialTeam();\r\n            //System.out.println(gameInfo.getHumans().get(0));\r\n\r\n            if (getInitialTeam() != getCurrentTeamId()) {\r\n                return false; //alterei isto segundo piaza//\r\n            }\r\n\r\n        } catch (FileNotFoundException e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean startGame(File ficheiroInicial) {\r\n        return loadGame(ficheiroInicial);\r\n    }\r\n\r\n    public int[] getWorldSize() {\r\n        return new int[]{gameInfo.getNrLines(), gameInfo.getNrColumns()};\r\n    }\r\n\r\n    public int getInitialTeam() {\r\n        //System.out.println(gameInfo.getFirstTeamID());\r\n        return gameInfo.getFirstTeamID();\r\n    }\r\n\r\n    public boolean isInsideBounds(int x, int y) {\r\n        if (x < 0 || y < 0 || y >= gameInfo.getNrLines() || x >= gameInfo.getNrColumns()) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /*\r\n    public boolean isValidMove(int xO, int yO, int xD, int yD){\r\n\r\n    }*/\r\n\r\n    public boolean move(int xO, int yO, int xD, int yD) {\r\n        //change valid moves, changes for diferent creatures\r\n        if (!isInsideBounds(xD, yD)) {\r\n            return false;\r\n        }\r\n        int idCriatura = getElementId(xO, yO);\r\n        int idEquipment = getElementId(xD, yD);\r\n        if (gameInfo.getCurrentTeamID() == gameInfo.getIdTeamVivos() &&\r\n                gameInfo.getCreatureHashMap().containsKey(idCriatura)) {\r\n            Creature creature = gameInfo.getCreatureById(idCriatura);\r\n            if (creature.isValidMove(xO, yO, xD, yD)) {\r\n                creature.move(xD, yD); //NOT FINISHED\r\n            }\r\n\r\n        }\r\n\r\n\r\n        /*\r\n        if (gameInfo.getHumanoHashMap().containsKey(idCriatura)\r\n                && gameInfo.getCurrentTeamID() == gameInfo.getIdTeamVivos()) {\r\n\r\n            Vivo vivo = gameInfo.getVivoById(idCriatura);\r\n            System.out.println(vivo);\r\n            if (idEquipment != 0) {\r\n                Equipamento equipamento = gameInfo.getEquipamentoHashMap().get(idEquipment);\r\n                if (vivo.getEquipment()!=null) {\r\n                    Equipamento equipamentDroped = vivo.dropEquipment();\r\n                    gameInfo.addEquipment(equipamentDroped); //adds the dropped equipment to structures\r\n                }\r\n                vivo.pickEquipment(equipamento);\r\n                gameInfo.removeEquipment(equipamento); //removes picked item from structures\r\n            }\r\n            vivo.setCoordinates(xD, yD);\r\n            System.out.println(vivo);\r\n            gameInfo.nextTurn();\r\n            return true;\r\n        }\r\n        if (gameInfo.getZombieHashMap().containsKey(idCriatura)\r\n                && gameInfo.getCurrentTeamID()==gameInfo.getIdTeamMortos()) {\r\n\r\n            Zombie zombie = gameInfo.getZombieById(idCriatura);\r\n            System.out.println(zombie);\r\n            if (idEquipment != 0) {\r\n                Equipamento equipamento = gameInfo.getEquipamentoHashMap().get(idEquipment);\r\n                zombie.destroyEquiment();\r\n                gameInfo.removeEquipment(equipamento);\r\n            }\r\n            zombie.setCoordinates(xD, yD);\r\n            gameInfo.nextTurn();\r\n            System.out.println(zombie);\r\n            return true;\r\n        }*/\r\n        return false;\r\n    }\r\n\r\n    public boolean gameIsOver() {\r\n        return gameInfo.getNrTurno() == gameInfo.getNrMaxTurnos();\r\n    }\r\n\r\n    public List<String> getAuthors() {\r\n        ArrayList<String> creditos = new ArrayList<>();\r\n        creditos.add(\"Filipe Coutinho 21903016\");\r\n        creditos.add(\"Tomás Neto 21903361\");\r\n        return creditos;\r\n    }\r\n\r\n    public int getCurrentTeamId() {\r\n        return gameInfo.getCurrentTeamID();\r\n    }\r\n\r\n    public int getElementId(int x, int y) {\r\n        for (SafeHaven sf : gameInfo.getSafeHavens()) {\r\n            if (sf.getPosY() == y && sf.getPosX() == x) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        for (Creature c : gameInfo.getCreatures()) {\r\n            if (c.getPosY() == y && c.getPosX() == x) {\r\n                return c.getId();\r\n            }\r\n        }\r\n\r\n        ArrayList<Equipamento> equipments = gameInfo.getEquipments();\r\n        for (Equipamento equipamento : equipments) {\r\n            if (equipamento.getPosY() == y && equipamento.getPosX() == x) {\r\n                return equipamento.getId();\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /*public List<String> getSurvivors() {\r\n        ArrayList<String> survivors = new ArrayList<>();\r\n        if (gameIsOver()) {\r\n            survivors.add(\"Nr. de turnos terminados:\");\r\n            survivors.add(String.valueOf(gameInfo.getNrTurno()));\r\n            survivors.add(\"\");\r\n            survivors.add(\"OS VIVOS\\n\");\r\n\r\n            for (Vivo vivo : gameInfo.getHumans()) {\r\n                survivors.add(vivo.idCriatura + \" \" + vivo.nome);\r\n            }\r\n            survivors.add(\" \");\r\n            survivors.add(\"OS OUTROS\\n\");\r\n\r\n            for (Zombie zombie : gameInfo.getZombies()) {\r\n                survivors.add(zombie.idCriatura + \" (antigamente conhecido como \" + zombie.nome\r\n                        + \")\");\r\n            }\r\n        }\r\n        return survivors;\r\n    }*/\r\n\r\n    public List<String> getGameResults() { //TODO make function\r\n        ArrayList<String> results = new ArrayList<>();\r\n        return results;\r\n    }\r\n\r\n    public static boolean isDay() {\r\n        GameInfo gameInfo = GameInfo.getInstance();\r\n        return gameInfo.getNrTurno() == 0 || gameInfo.getNrTurno() == 1 ||\r\n                gameInfo.getNrTurno() == 4\r\n                || gameInfo.getNrTurno() == 5 || gameInfo.getNrTurno() == 8 ||\r\n                gameInfo.getNrTurno() == 9 || gameInfo.getNrTurno() == 12;\r\n\r\n    }\r\n\r\n    public boolean hasEquipment(int creatureId, int equipmentTypeId) {\r\n        Vivo vivo = (Vivo) gameInfo.getCreatureById(creatureId);\r\n        if (vivo != null && vivo.getEquipment() != null) {\r\n            return vivo.getEquipment().getIdTipo() == equipmentTypeId;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public List<Creature> getCreatures() {\r\n        return gameInfo.getCreatures();\r\n    }\r\n\r\n    public int getEquipmentTypeId(int equipmentId) {\r\n        return gameInfo.getEquipmentById(equipmentId).getIdTipo();\r\n    }\r\n\r\n    public String getEquipmentInfo(int equipmentId) { //TODO change to OOP\r\n        Equipamento equipamento = gameInfo.getEquipmentById(equipmentId);\r\n        return equipamento.getInfo();\r\n    }\r\n\r\n    public boolean isDoorToSafeHaven(int x, int y) {\r\n        for (SafeHaven sf : gameInfo.getSafeHavens()) {\r\n            if (sf.equals(new SafeHaven(x, y))) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public int getEquipmentId(int creatureId) {\r\n        try {\r\n            Vivo creature = (Vivo) gameInfo.getCreatureById(creatureId);\r\n            return creature.getEquipment().getId();\r\n        } catch (NullPointerException | ClassCastException exception) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/pt/ulusofona/lp2/theWalkingDEISIGame/TWDGameManager.java	(revision 0553f69b52a72f4160bd517538b17fb977d5414f)
+++ src/pt/ulusofona/lp2/theWalkingDEISIGame/TWDGameManager.java	(date 1608587424871)
@@ -118,12 +118,6 @@
         return true;
     }
 
-
-    /*
-    public boolean isValidMove(int xO, int yO, int xD, int yD){
-
-    }*/
-
     public boolean move(int xO, int yO, int xD, int yD) {
         //change valid moves, changes for diferent creatures
         if (!isInsideBounds(xD, yD)) {
@@ -244,7 +238,7 @@
         return results;
     }
 
-    public static boolean isDay() {
+    public boolean isDay() {
         GameInfo gameInfo = GameInfo.getInstance();
         return gameInfo.getNrTurno() == 0 || gameInfo.getNrTurno() == 1 ||
                 gameInfo.getNrTurno() == 4
Index: src/pt/ulusofona/lp2/theWalkingDEISIGame/IdosoVivo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pt.ulusofona.lp2.theWalkingDEISIGame;\r\n\r\npublic class IdosoVivo extends Vivo {\r\n    public IdosoVivo(String nome, int posX, int posY) {\r\n        super(8, nome, posX, posY);\r\n    }\r\n\r\n    @Override\r\n    public boolean move(int xD, int yD) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean isValidMove(int xO, int yO, int xD, int yD) {\r\n        if (xO == xD && yO == yD || !TWDGameManager.isDay()) {\r\n            return false;\r\n        }\r\n        return (xD != yD && xD > xO - 1 && xD < xO + 1 && yD > yO - 1 && yD < yO + 1);\r\n    }\r\n\r\n    public String getImagePNG(){\r\n        return \"oldMan.png\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/pt/ulusofona/lp2/theWalkingDEISIGame/IdosoVivo.java	(revision 0553f69b52a72f4160bd517538b17fb977d5414f)
+++ src/pt/ulusofona/lp2/theWalkingDEISIGame/IdosoVivo.java	(date 1608587424876)
@@ -12,7 +12,7 @@
 
     @Override
     public boolean isValidMove(int xO, int yO, int xD, int yD) {
-        if (xO == xD && yO == yD || !TWDGameManager.isDay()) {
+        if (xO == xD && yO == yD) { //TODO !isDay -> return false
             return false;
         }
         return (xD != yD && xD > xO - 1 && xD < xO + 1 && yD > yO - 1 && yD < yO + 1);
